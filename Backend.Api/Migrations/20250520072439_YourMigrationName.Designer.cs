// <auto-generated />
using System;
using Backend.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250520072439_YourMigrationName")]
    partial class YourMigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Backend.Api.Modules.AuthService.Entities.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("Backend.Api.Modules.AuthService.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Backend.Api.Modules.BookingService.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualCheckIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualCheckOut")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumPeople")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SpaceId1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookingCode")
                        .IsUnique()
                        .HasFilter("[BookingCode] IS NOT NULL");

                    b.HasIndex("SpaceId");

                    b.HasIndex("SpaceId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Bookings", "BookingService");
                });

            modelBuilder.Entity("Backend.Api.Modules.ServiceService.Entities.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailableAdHoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPricedPerBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.ServiceSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsIncludedInBasePrice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PriceOverride")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SpaceId");

                    b.ToTable("ServicesSpaces", (string)null);
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Space", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BufferMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CancellationNoticeHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CleaningDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("HourlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("LastEditedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxBookingDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinBookingDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastEditedByUserId");

                    b.HasIndex("OwnerProfileId");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.SpaceAmenity", b =>
                {
                    b.Property<Guid>("SpaceAmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("SpaceAmenityId");

                    b.HasIndex("AmenityId");

                    b.HasIndex("SpaceId", "AmenityId")
                        .IsUnique();

                    b.ToTable("SpaceAmenities");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.SpaceImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("SpaceImages", (string)null);
                });

            modelBuilder.Entity("Backend.Api.Modules.UserService.Entities.OwnerProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessLicenseNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("OwnerProfiles");
                });

            modelBuilder.Entity("Backend.Api.Modules.UserService.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Api.Modules.AuthService.Entities.PasswordResetToken", b =>
                {
                    b.HasOne("Backend.Api.Modules.UserService.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Api.Modules.AuthService.Entities.RefreshToken", b =>
                {
                    b.HasOne("Backend.Api.Modules.UserService.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Api.Modules.BookingService.Entities.Booking", b =>
                {
                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", null)
                        .WithMany("Bookings")
                        .HasForeignKey("SpaceId1");

                    b.HasOne("Backend.Api.Modules.UserService.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Api.Modules.UserService.Entities.User", null)
                        .WithMany("Bookings")
                        .HasForeignKey("UserId1");

                    b.Navigation("Space");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.ServiceSpace", b =>
                {
                    b.HasOne("Backend.Api.Modules.ServiceService.Entities.ServiceEntity", "Service")
                        .WithMany("ServiceSpaces")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "Space")
                        .WithMany("ServiceSpaces")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Space", b =>
                {
                    b.HasOne("Backend.Api.Modules.UserService.Entities.User", "CreatedByUser")
                        .WithMany("CreatedSpaces")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Api.Modules.UserService.Entities.User", "LastEditedByUser")
                        .WithMany("LastEditedSpaces")
                        .HasForeignKey("LastEditedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Api.Modules.UserService.Entities.OwnerProfile", "OwnerProfile")
                        .WithMany("OwnedSpaces")
                        .HasForeignKey("OwnerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("OwnerProfile");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.SpaceAmenity", b =>
                {
                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Amenity", "Amenity")
                        .WithMany("SpaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "Space")
                        .WithMany("SpaceAmenities")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.SpaceImage", b =>
                {
                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "Space")
                        .WithMany("SpaceImages")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Backend.Api.Modules.UserService.Entities.OwnerProfile", b =>
                {
                    b.HasOne("Backend.Api.Modules.UserService.Entities.User", "User")
                        .WithOne("OwnerProfile")
                        .HasForeignKey("Backend.Api.Modules.UserService.Entities.OwnerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Api.Modules.ServiceService.Entities.ServiceEntity", b =>
                {
                    b.Navigation("ServiceSpaces");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Amenity", b =>
                {
                    b.Navigation("SpaceAmenities");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Space", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceSpaces");

                    b.Navigation("SpaceAmenities");

                    b.Navigation("SpaceImages");
                });

            modelBuilder.Entity("Backend.Api.Modules.UserService.Entities.OwnerProfile", b =>
                {
                    b.Navigation("OwnedSpaces");
                });

            modelBuilder.Entity("Backend.Api.Modules.UserService.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CreatedSpaces");

                    b.Navigation("LastEditedSpaces");

                    b.Navigation("OwnerProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
